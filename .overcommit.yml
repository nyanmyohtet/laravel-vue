# Use this file to configure the Overcommit hooks you wish to use. This will
# extend the default configuration defined in:
# https://github.com/sds/overcommit/blob/master/config/default.yml
#
# At the topmost level of this YAML file is a key representing type of hook
# being run (e.g. pre-commit, commit-msg, etc.). Within each type you can
# customize each hook, such as whether to only run it on certain files (via
# `include`), whether to only display output if it fails (via `quiet`), etc.
#
# For a complete list of hooks, see:
# https://github.com/sds/overcommit/tree/master/lib/overcommit/hook
#
# For a complete list of options that you can use to customize hooks, see:
# https://github.com/sds/overcommit#configuration
#
# Uncomment the following lines to make the configuration take effect.

# Hooks that are run after `git commit` is executed, before the commit message
# editor is displayed. These hooks are ideal for syntax checkers, linters, and
# other checks that you want to run before you allow a commit object to be
# created.
PreCommit:
  ALL:
    problem_on_unmodified_line: report
    requires_files: true
    required: false
    quiet: false

  AuthorEmail:
    enabled: true
    description: 'Check author email'
    requires_files: false
    required: true
    quiet: true
    pattern: '^[^@]+@.*$'

  AuthorName:
    enabled: true
    description: 'Check for author name'
    requires_files: false
    required: true
    quiet: true

  BrokenSymlinks:
    enabled: true
    description: 'Check for broken symlinks'
    quiet: true

  CaseConflicts:
    enabled: false
    description: 'Check for case-insensitivity conflicts'
    quiet: true

  CssLint:
    enabled: true
    description: 'Analyze with csslint'
    required_executable: 'csslint'
    flags: ['--quiet', '--format=compact']
    install_command: 'npm install -g csslint'
    include: '**/*.css'

  EsLint:
    enabled: true
    description: 'Analyze with ESLint'
    required_executable: 'eslint'
    flags: ['--format=compact']
    install_command: 'npm install -g eslint'
    include: '**/*.js'

  FixMe:
    enabled: true
    description: 'Check for "token" strings'
    required_executable: 'grep'
    flags: ['-IEHnw']
    keywords: ['BROKEN', 'BUG', 'ERROR', 'FIXME', 'HACK', 'NOTE', 'OPTIMIZE', 'REVIEW', 'TODO', 'WTF', 'XXX']

  FileSize:
    enabled: false
    description: 'Check for oversized files'
    size_limit_bytes: 1_000_000

  HardTabs:
    enabled: true
    description: 'Check for hard tabs'
    quiet: true
    required_executable: 'grep'
    flags: ['-IHn', "\t"]
    exclude:
      - '**/Makefile'
      - '**/*.go'
      - 'laravel/config/dompdf.php'

  HtmlHint:
    enabled: true
    description: 'Analyze with HTMLHint'
    required_executable: 'htmlhint'
    install_command: 'npm install -g htmlhint'
    include: '**/*.html'

  ImageOptim:
    enabled: false
    description: 'Check for optimizable images'
    required_executable: 'image_optim'
    install_command: 'gem install image_optim'
    include:
      - '**/*.gif'
      - '**/*.jpeg'
      - '**/*.jpg'
      - '**/*.png'
      - '**/*.svg'

  RuboCop:
    enabled: true
    on_warn: fail # Treat all warnings as failures

  TrailingWhitespace:
    enabled: true
    exclude:
      - '**/db/structure.sql' # Ignore trailing whitespace in generated files

# Hooks that run during the `prepare-commit-msg` hook.
PrepareCommitMsg:
  ALL:
    requires_files: false
    required: false
    quiet: false

  ReplaceBranch:
    enabled: true
    description: 'Prepends the commit message with text based on the branch name'
    branch_pattern: '\A.*\w+[-_](\d+).*\z'
    replacement_text: '[#\1]'
    skipped_commit_types: ['message', 'template', 'merge', 'squash']
    on_fail: warn

# Hooks that are run against every commit message after a user has written it.
# These hooks are useful for enforcing policies on commit messages written for a
# project.
CommitMsg:
